#region Prolog


#################################################################
## IBM Confidential
##
## OCO Source Materials
##
## BI and PM: pmpsvc
##
## (C) Copyright IBM Corp. 2008, 2009, 2010
##
## The source code for this program is not published or otherwise
## divested of its trade secrets, irrespective of what has been
## deposited with the U.S. Copyright Office.
#################################################################

#***
vVersionIndex = StringToNumber(pVersionIndex);
vApprovalIndex = StringToNumber(pApprovalIndex);
vCellSecurityPermissionCube = '}CellSecurity_}tp_application_permission}' | pAppId;
cIMRDCLSCube = '}tp_intermediate_RDCLS}' | pCube;

#*Update Intermediate cell security cube

vView = CellGetS(vCellSecurityPermissionCube, pApprovalNode, 'VIEW', pGroup);
vEdit = CellGetS(vCellSecurityPermissionCube, pApprovalNode, 'EDIT', pGroup);
vNodeSecurity = '';
vVersionSecurity = '';
vFinalSecurity = '';
IF (vView @= 'READ');
	IF (DType(pApprovalDim, pApprovalNode) @='C');
		vNodeSecurity = 'WRITE';
	Else;
		vNodeSecurity = 'READ';
	Endif;
Endif;

IF (vEdit @= 'READ');
	vNodeSecurity = 'WRITE';
Endif;
							
IF (vNodeSecurity @<> '');

	#***readable version slices
	versionSeparater = '|';
	vPosVersion = 0;
	vStringToScan = pVersionSlicesRead;
	IF (pVersionSlicesRead @<> '');
		vPosVersion = SCAN(versionSeparater, vStringToScan);
	Else;
		#Even no readable version slices are defined, we still need to apply security
		#based on approval dimension
		vPosVersion = 1;
	Endif;

	While (vPosVersion >0);
		vVersionSlice  = SUBST(vStringToScan, 1, vPosVersion-1);
		vStringToScan = SUBST(vStringToScan, vPosVersion +1, LONG(vStringToScan)-vPosVersion);
		vPosVersion = SCAN(versionSeparater, vStringToScan);

		IF (vVersionIndex >0);
			IF (vVersionSlice @<> '' );
				IF (vApprovalIndex >0);
					IF (pVersionFirst @= 'Y');
						CellPutS('READ', cIMRDCLSCube, vVersionSlice, pApprovalNode,pAppId, pGroup,'Rights' );
					Else;
						CellPutS('READ', cIMRDCLSCube, pApprovalNode, vVersionSlice,pAppId, pGroup,'Rights' );
					Endif;
				Else;
					CellPutS('READ', cIMRDCLSCube, vVersionSlice, pAppId, pGroup,'Rights' );	
				Endif;
			Endif;

		ElseIf (vVersionIndex = 0 & vApprovalIndex >0);
			CellPutS('READ', cIMRDCLSCube, pApprovalNode, pAppId, pGroup,'Rights' );
		Endif;

	End;

	#***writable version slices
	versionSeparater = '|';
	vPosVersion = 0;
	vStringToScan = pVersionSlicesWrite;
	IF (pVersionSlicesWrite @<> '');
		vPosVersion = SCAN(versionSeparater, vStringToScan);
	Else;
		#Even no writable version slices are defined, we still need to apply security
		#based on approval dimension
		vPosVersion = 1;
	Endif;

	While (vPosVersion >0);
		vVersionSlice  = SUBST(vStringToScan, 1, vPosVersion-1);
		vStringToScan = SUBST(vStringToScan, vPosVersion +1, LONG(vStringToScan)-vPosVersion);
		vPosVersion = SCAN(versionSeparater, vStringToScan);
		IF (vNodeSecurity @= 'READ');
			vFinalSecurity = 'READ';
		Elseif (vNodeSecurity @= 'WRITE');
			vFinalSecurity = 'WRITE';
		Endif;
	
		IF (vVersionIndex >0);
			IF (vVersionSlice @<>'');
				IF (vApprovalIndex >0);
					IF (pVersionFirst @= 'Y');
						CellPutS(vFinalSecurity, cIMRDCLSCube, vVersionSlice, pApprovalNode,pAppId, pGroup,'Rights' );
					Else;
						CellPutS(vFinalSecurity, cIMRDCLSCube, pApprovalNode, vVersionSlice,pAppId, pGroup,'Rights' );
					Endif;
				Else;
					CellPutS(vFinalSecurity, cIMRDCLSCube, vVersionSlice, pAppId, pGroup,'Rights' );
				Endif;
			Endif;

		ElseIf (vVersionIndex = 0 & vApprovalIndex >0);
			CellPutS(vFinalSecurity, cIMRDCLSCube, pApprovalNode, pAppId, pGroup,'Rights' );
		Endif;
	End;
Endif;
#endregion